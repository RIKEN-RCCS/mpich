--- src/mpid/ch4/netmod/ofi/ofi_send.h
+++ src/mpid/ch4/netmod/ofi/ofi_send.h
@@ -190,8 +190,14 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_send_normal(const void *buf, MPI_Aint cou
     }
 
     if (!dt_contig && data_sz) {
+#define TOFU
+#ifdef TOFU
+        if (MPIDI_OFI_ENABLE_PT2PT_NOPACK && data_sz < MPIDI_OFI_global.max_short_send &&
+            !force_gpu_pack) {
+#else
         if (MPIDI_OFI_ENABLE_PT2PT_NOPACK && data_sz < MPIDI_OFI_global.max_msg_size &&
             !force_gpu_pack) {
+#endif
             mpi_errno = MPIDI_OFI_send_iov(buf, count, data_sz, cq_data, dst_rank, match_bits,
                                            comm, addr, vni_src, vni_dst, sreq, dt_ptr);
             if (mpi_errno == MPI_SUCCESS)       /* Send posted using iov */
@@ -235,7 +241,15 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_send_normal(const void *buf, MPI_Aint cou
                                             match_bits), vni_local, tinjectdata,
                              FALSE /* eagain */);
         MPIDI_OFI_send_event(NULL, sreq, MPIDI_OFI_REQUEST(sreq, event_id));
+// YI
+#define TOFU
+#ifdef TOFU // YI 20201212
+    } else if (data_sz < MPIDI_OFI_global.max_short_send) {
+	//printf("%s: data_sz(%d) <= short(%d)\n", __func__, data_sz, MPIDI_OFI_global.max_short_send); fflush(stdout);
+	//fprintf(stderr, "%s: data_sz(%d) <= short(%d)\n", __func__, data_sz, MPIDI_OFI_global.max_short_send); fflush(stderr);
+#else
     } else if (data_sz < MPIDI_OFI_global.max_msg_size) {
+#endif
         MPIDI_OFI_CALL_RETRY(fi_tsenddata(MPIDI_OFI_global.ctx[vni_src].tx,
                                           send_buf, data_sz, NULL /* desc */ ,
                                           cq_data,
@@ -286,6 +300,19 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_send_normal(const void *buf, MPI_Aint cou
         MPIR_Comm_add_ref(comm);
         MPIDI_OFI_REQUEST(sreq, util_id) = dst_rank;
         match_bits |= MPIDI_OFI_HUGE_SEND;      /* Add the bit for a huge message */
+// YI
+#define TOFU
+#ifdef TOFU /* YI 20201214 */
+	//printf("%s: calling fi_tsenddata(0x%lx)\n", __func__, MPIDI_OFI_global.max_short_send); fflush(stdout);
+	//fprintf(stderr, "%s: calling fi_tsenddata(0x%lx)\n", __func__, MPIDI_OFI_global.max_short_send); fflush(stderr);
+        MPIDI_OFI_CALL_RETRY(fi_tsenddata(MPIDI_OFI_global.ctx[vni_src].tx,
+                                          send_buf, MPIDI_OFI_global.max_short_send, NULL /* desc */ ,
+                                          cq_data,
+                                          MPIDI_OFI_av_to_phys(addr, vni_local, vni_remote),
+                                          match_bits,
+                                          (void *) &(MPIDI_OFI_REQUEST(sreq, context))),
+                             vni_local, tsenddata, FALSE /* eagain */);
+#else
         MPIDI_OFI_CALL_RETRY(fi_tsenddata(MPIDI_OFI_global.ctx[vni_src].tx,
                                           send_buf, MPIDI_OFI_global.max_msg_size, NULL /* desc */ ,
                                           cq_data,
@@ -293,6 +320,7 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_send_normal(const void *buf, MPI_Aint cou
                                           match_bits,
                                           (void *) &(MPIDI_OFI_REQUEST(sreq, context))),
                              vni_local, tsenddata, FALSE /* eagain */);
+#endif
         ctrl.type = MPIDI_OFI_CTRL_HUGE;
         ctrl.seqno = 0;
         ctrl.tag = tag;
